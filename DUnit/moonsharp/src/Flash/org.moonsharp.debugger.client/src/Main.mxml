<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="100%" height="100%" minWidth="955" minHeight="600"
			   applicationComplete="application_applicationCompleteHandler(event)"
			   initialize="initializeApp();">
	<fx:Style source="MXFTEText.css"/>
	<fx:Style source="Main.css"/>
	
	<fx:Script>
		
		<![CDATA[
			import flashx.textLayout.formats.TextLayoutFormat;
			
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			
			import spark.components.TextSelectionHighlighting;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			[Bindable]
			public var menuBarCollection:XMLListCollection;
			
			[Bindable][Embed (source="assets/stepin.gif" )] public var  stepin:Class;
			[Bindable][Embed (source="assets/stepout.gif" )] public var  stepout:Class;
			[Bindable][Embed (source="assets/stepover.gif" )] public var  stepover:Class;

			[Bindable][Embed (source="assets/run.gif" )] public var  run:Class;
			[Bindable][Embed (source="assets/pause.gif" )] public var  pause:Class;

			[Bindable][Embed (source="assets/add.gif" )] public var add:Class;
			[Bindable][Embed (source="assets/breakpoint.gif" )] public var  breakpoint:Class;
			[Bindable][Embed (source="assets/remove.gif" )] public var  remove:Class;
			[Bindable][Embed (source="assets/step_current.gif" )] public var  step_current:Class;
			[Bindable][Embed (source="assets/watch.gif" )] public var  watch:Class;
			
			private var m_DisableKeys : Boolean = false;
			
			
			private var menubarXML:XMLList =
				<>
					<menuitem label="Debug" data="top">
						<menuitem label="(I) - Step In" data="stepin" icon="stepin"/>
						<menuitem label="(O) - Step Over" data="stepover" icon="stepover"/>
						<menuitem label="(U) - Step Out" data="stepout" icon="stepout"/>
						<menuitem type="separator"/>
						<menuitem label="(R) - Run" data="run" icon="run" />
						<menuitem label="(P) - Pause" data="pause" icon="pause" />
						<menuitem type="separator"/>
						<menuitem label="(G) - Go to current" data="step_current" icon="step_current" />
					</menuitem>
					<menuitem label="Breakpoints" data="top">
						<menuitem label="(B) - Toggle breakpoint" data="breakpoint" icon="breakpoint" />
						<menuitem label="Set breakpoint" data="set_breakpoint"  />
						<menuitem label="Clear breakpoint" data="clear_breakpoint"  />
						<menuitem type="separator"/>
						<menuitem label="(E) - Errors break regex..." data="error_rx"   />
					</menuitem>
					<menuitem label="Watches" data="top">
						<menuitem label="(Ins) - Add watches..." data="add" icon="add" />
						<menuitem label="(Del) - Remove selected watches" data="remove" icon="remove" />
						<menuitem type="separator"/>
						<menuitem label="(W) - Watch current..." data="watch" icon="watch" />
					</menuitem>
					<menuitem label="Help" data="top">
						<menuitem label="About..." data="about"/>
					</menuitem>
				</>;			
			
			private function initializeApp():void {
				menuBarCollection = new XMLListCollection(menubarXML);
			}
			
			private function menuHandler(evt:MenuEvent):void  
			{
				var cmd : String = evt.item.@data; 
				
				if (cmd != "top") exec(cmd);
			}
			
			
			private var m_Debugger : DebuggerViewLogic; 
			
			protected function application_applicationCompleteHandler(event:FlexEvent):void
			{
				m_Debugger = new DebuggerViewLogic(this, this.loaderInfo);
				systemManager.addEventListener(KeyboardEvent.KEY_UP, shortcutListener, true);   
			}
			
			private function shortcutListener(e:KeyboardEvent):void
			{
				if (m_DisableKeys) return;
				
				switch(e.keyCode)
				{
					case 73:
						exec("stepin");
						break;
					case 79:
						exec("stepover");
						break;
					case 85:
						exec("stepout");
						break;
					case 82:
						exec("run");
						break;
					case 80:
						exec("pause");
						break;
					case 66:
						exec("breakpoint");
						break;
					case 71:
						exec("step_current");
						break;
					case 45:
						exec("add");
						break;
					case 46:
						exec("remove");
						break;
					case 87:
						exec("watch");
						break;
				}
				
				
			}
			
			public function refreshSourceCode(s : SourceCode, l : ArrayList) : void
			{
				var sel:int = lstSources.selectedIndex;
				
				lstSources.dataProvider = l;
				
				if (sel >= 0)
				{
					lstSources.selectedIndex = sel;
					lstSources_changeHandler(null);
				}
				else
				{
					lstSources.selectedIndex = 0;
					lstSources_changeHandler(null);
				}
			}
			
			public function refreshInstructionPtrHighlight(switchToSource:Boolean) : void
			{
				var hl:Highlight = m_Debugger.getInstructionPtrHighlight();
				
				if (switchToSource && hl !== null && hl.Source !== m_CurrentSrc)
				{
					selectSource(hl.Source);
				}
				
				var tlf:TextLayoutFormat = new TextLayoutFormat();
				tlf.backgroundColor = 0x444444;
				
				txtCode.setFormatOfRange(tlf, 0, txtCode.text.length - 1);
				
				if (hl !== null && hl.Source === m_CurrentSrc)
				{
					var tlf2:TextLayoutFormat = new TextLayoutFormat();
					tlf2.backgroundColor = 0x645ef5;
					
					txtCode.setFormatOfRange(tlf2, hl.From, hl.To);
					moveCaret(hl.To);
				}
			}
			
			public function refreshBreakpoints() : void
			{
				if (m_CurrentSrc == null) return;
				
				var tlf:TextLayoutFormat = new TextLayoutFormat();
				tlf.color = 0xEEEEEE;
				
				txtCode.setFormatOfRange(tlf, 0, txtCode.text.length - 1);
				
				var tlf2:TextLayoutFormat = new TextLayoutFormat();
				tlf2.color = 0xff0000;
				
				for(var i:int = 0; i < m_CurrentSrc.Breakpoints.length; i++)
				{
					var hl:Highlight =  m_CurrentSrc.Breakpoints[i];
					txtCode.setFormatOfRange(tlf2, hl.From, hl.To);
				}
			}
			
			private var m_CurrentSrc:SourceCode = null;
			
			public function refreshCallStack(l : ArrayList):void
			{
				gridStack.dataProvider = l;
			}
			
			public function refreshWatches(l : ArrayList):void
			{
				gridWatches.dataProvider = l;
			}
			
			private function selectSource(S : SourceCode) : void
			{
				lstSources.selectedItem = S;	
				lstSources_changeHandler(null);
			}
			
			protected function lstSources_changeHandler(event:IndexChangeEvent):void
			{
				var S : SourceCode = (SourceCode)(lstSources.selectedItem);
				txtCode.text = S.getText();
				m_CurrentSrc = S;
				refreshInstructionPtrHighlight(false);
				refreshBreakpoints();
				updateCaretLabel();
			}
			
			protected function getSourceName(o : Object) : String
			{
				var S : SourceCode = o as SourceCode;
				return S.getId() + " : " + S.getName();	
			}
			
			public function welcome(appName : String, ver : String): void
			{
				titleBar.text = "MoonSharp Remote Debugger - [" + appName + "] - v" + ver;
			}
			
			public function appendMessage(text : String) : void
			{
				textOutput.text += text + "\n";
				textOutput.scrollToRange(int.MAX_VALUE, int.MAX_VALUE);
			}
			
			protected function txtCode_changingHandler(event:TextOperationEvent):void
			{
				event.preventDefault();
			}
			
			protected function toggleBreakpoint(cmdType:String) : void
			{
				if (m_CurrentSrc == null) return;
				
				var cursor:int = txtCode.selectionActivePosition;
				var line:int = m_CurrentSrc.inflateLocationLine(cursor);
				var col:int = m_CurrentSrc.inflateLocationColumn(cursor, line);
				
				m_Debugger.toggleBreakpoint(m_CurrentSrc.getId(), line, col, cmdType);
			}
			
			protected function moveCaret(where : int) : void
			{
				txtCode.setFocus();
				txtCode.selectRange(where, where);
				txtCode.scrollToRange(where, where);
				updateCaretLabel();
			}
			
			protected function updateCaretLabel() : void
			{
				if (m_CurrentSrc == null) return;

				var cursor:int = txtCode.selectionActivePosition;
				var line:int = m_CurrentSrc.inflateLocationLine(cursor);
				var col:int = m_CurrentSrc.inflateLocationColumn(cursor, line);
				
				txtCaret.text = m_CurrentSrc.getName() + ":" + line.toString() + ","+col.toString();
			}
			
			
			public function exec(cmd:String) : void
			{
				var wi:WatchItem;
				
				if (cmd == "about") AboutBox.show(this);
				else if (cmd == "stepin") m_Debugger.stepIn();
				else if (cmd == "stepout") m_Debugger.stepOut();
				else if (cmd == "stepover") m_Debugger.stepOver();
				else if (cmd == "run") m_Debugger.run();
				else if (cmd == "pause") m_Debugger.pause();
				else if (cmd == "step_current") refreshInstructionPtrHighlight(true);
				else if (cmd == "breakpoint") toggleBreakpoint("toggle");
				else if (cmd == "set_breakpoint") toggleBreakpoint("set");
				else if (cmd == "clear_breakpoint") toggleBreakpoint("clear");
				else if (cmd == "error_rx")
				{
					m_DisableKeys = true;
					
					InputBox.show(this, "Error RegEx", 
						"Insert a regular expression which matches error messages you want to stop on.", m_Debugger.getErrorRx(), 
						
					function(str:String):void
					{
						m_DisableKeys = false;
						
						if (str !== null && str !== "")
							m_Debugger.setErrorRx(str);
					});
				}
				else if (cmd == "add") 
				{
					m_DisableKeys = true;
					
					InputBox.show(this, "Add watch...", "Enter the name of the variables you want to watch, separated by ',' if more than one is desired", "", function(str:String):void
					{
						m_DisableKeys = false;
						
						if (str !== null && str !== "")
							m_Debugger.addWatch(str);
					});
				}
				else if (cmd == "remove") 
				{
					var str:String = "";
					
					for each(wi in gridWatches.selectedItems)
					{
						if (str.length > 0)
							str += ",";
						
						str += wi.Name;	
					}
					
					if (str.length > 0)
						m_Debugger.removeWatch(str);
				}
				else if (cmd == "watch")
				{
					wi = gridWatches.selectedItem as WatchItem;
					
					if (wi != null)
					{
						Alert.show("Value = " + wi.Value + "\n" + 
							"Type = " + wi.Type + "\n" + 
							"Scope = " + wi.LValue, wi.Name); 
					}					
				}
				else
				{
					Alert.show("Unknown command " + cmd, "Error", Alert.OK, this);
				}
			}
				
			
			
			
			
		]]>
	</fx:Script> 
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
	<mx:VBox width="100%" height="100%">
		
		<s:Label width="100%" id="titleBar" height="24" text="MoonSharp Remote Debugger - Connecting..."
				 verticalAlign="middle"
				 textAlign="center"
				 fontSize="14"
				 fontWeight="bold"
				 paddingTop="8"
				 color="0xFFFFFF"
				 />
		
		
		<mx:MenuBar labelField="@label" iconField="@icon" itemClick="menuHandler(event);" dataProvider="{menuBarCollection}" width="100%"
					cornerRadius="0" 
					/>
		
		<mx:HBox width="100%" paddingTop="0" paddingLeft="4">
			<s:Button height="20" label="Step in" click="exec('stepin');" icon="{stepin}"/> 
			<s:Button height="20" label="Step out" click="exec('stepout');" icon="{stepout}"/> 
			<s:Button height="20" label="Step over" click="exec('stepover');" icon="{stepover}"/>
			<s:Button height="20" label="Run" click="exec('run');" icon="{run}"/>
			<s:Button height="20" label="Pause" click="exec('pause');" icon="{pause}"/>
			<s:Button height="20" label="Go to current" click="exec('step_current');" icon="{step_current}"/> 
			<s:Button height="20" label="Toggle breakpoint"  icon="{breakpoint}" click="exec('breakpoint');"/> 
		</mx:HBox>
		
		<mx:HDividedBox width="100%" height="100%" liveDragging="true">
			<mx:VDividedBox width="30%" height="100%">
				<s:Panel title="Watches" width="100%" height="50%">
					<mx:VBox width="100%"  height="100%">
						<mx:HBox width="100%" paddingTop="4" paddingLeft="4">
							<s:Button height="20" id="btnAddWatch" label="Add" click="exec('add');" icon="{add}"/>
							<s:Button height="20" id="btnRemoveWatch" label="Remove" click="exec('remove');" icon="{remove}"/>
							<s:Button height="20" id="btnExpand" label="Inspect" click="exec('watch');" icon="{watch}" />
						</mx:HBox>
						<s:DataGrid id="gridWatches" width="100%" height="100%" selectionMode="multipleRows">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn dataField="Name" headerText="Name" ></s:GridColumn>
									<s:GridColumn dataField="Value" headerText="Value" ></s:GridColumn>
									<s:GridColumn dataField="Type" headerText="Type" ></s:GridColumn>
									<s:GridColumn dataField="LValue" headerText="Scope" ></s:GridColumn>
								</s:ArrayList>
							</s:columns>
						</s:DataGrid>
					</mx:VBox>
				</s:Panel>				
				<s:Panel title="Stack" width="100%" height="50%">
					<s:DataGrid id="gridStack" width="100%" height="100%" sortableColumns="false">
						<s:columns>
							<s:ArrayList>
								<s:GridColumn dataField="Address" headerText="Address" ></s:GridColumn>
								<s:GridColumn dataField="Name" headerText="Name" ></s:GridColumn>
								<s:GridColumn dataField="RetAddress" headerText="Return" ></s:GridColumn>
								<s:GridColumn dataField="BasePtr" headerText="Base Ptr" ></s:GridColumn>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:Panel>
			</mx:VDividedBox>
			<mx:VDividedBox width="70%" height="100%">
				<s:Panel id="codeBox" width="100%" height="70%" title="Code">
					<mx:VBox width="100%"  height="100%">
						<mx:HBox width="100%">
							<s:DropDownList width="100%" id="lstSources" change="lstSources_changeHandler(event)" labelFunction="getSourceName" />
						</mx:HBox>
						
						<s:Scroller width="100%"  height="100%">  
							<s:RichEditableText id="txtCode" width="100%" backgroundColor="0x444444"  height="100%" 
												fontFamily="UbuntuMono" fontSize="14"  editable="true" 
												selectionHighlighting="always"
												selectionChange="updateCaretLabel();"
												changing="txtCode_changingHandler(event)" />
						</s:Scroller>
					</mx:VBox>
				</s:Panel>
				<s:Panel id="outputBox" width="100%" height="30%" title="Output">
					<s:TextArea id="textOutput" width="100%" height="100%" editable="false"  /> 
				</s:Panel>
			</mx:VDividedBox>
			
		</mx:HDividedBox>
		
		<mx:HBox height="24" paddingTop="4" paddingLeft="8">
			<s:Label id="txtCaret" verticalAlign="middle" />
		</mx:HBox>
		
	</mx:VBox>
</s:Application>
